#!/bin/zsh

# Make a list of every package that has changed
typeset -Ua packages=()

typeset pkgdir="./Packages"

# Make a list of packages whose inner files have contents 
# which have been altered in the latest commit
for file in $(git diff --cached --name-only --relative=${pkgdir:t}); do
	packages+=${file%%/*}
done


# Update the version of any archives of
# a package whose underlying contents have been altered
for package in ${packages}; do

	typeset archive="./Archives/${package}.tgz"
	typeset formula="./Formula/${package}.rb"

	# Don't make a new archive file if none has been made before
	if [[ ! -f ${archive} ]]; then
		echo "No archive file of ${package} exists, add it using the following commands:" >&2
		echo "\ttar --directory ${pkgdir} --create ${package} --file ${archive} --auto" >&2
		echo "\tshasum -a 256 ${archive}" >&2
		exit 1
	fi

	tmpfile=$(mktemp --suffix .tgz)

	# Create a new tarball of the package
	echo "${ZSH_SCRIPT}:${LINENO}: creating archive of package ${package}..."
	tar --directory ${pkgdir} --create ${package} --file ${tmpfile} --auto || {
		echo "${ZSH_SCRIPT}:${LINENO}: tar was unable to create the archive file" >&2
		typeset tmpfile pkgdir >&2
		exit 1
	}

	# Compute the SHA256 checksum of the current tarball
	typeset old_checksum=${$(shasum -a 256 ${archive})##-*}
	# TODO replace wtih =${(s< >)$(shasum -a 256 ${file})[1]}

	# Compute the SHA256 checksum of the generated tarball
	typeset new_checksum=${$(shasum -a 256 ${tmpfile})##-*}
	# TODO replace wtih =${(s< >)$(shasum -a 256 ${file})[1]}

	# Compare the message digests. If the underlying file contents truly
	# changed, there should be a difference between the two checksums
	if [[ ${new_checksum} == ${old_checksum} ]]; then
		echo "error: the package with archive ${archive} contains 
		contents which are believed to have been changed in the latest commit,
		yet the checksum of ${archive} remains unchanged" >&2
		exit 1
	fi

	# Extract the version number from the formula 
	# and increment the patch version number
	typeset extraction=$(
		grep -E 'version' -m 1 ${formula} \
			| awk '{print $2}' \
			| grep -E -o '[^"]+'
	)
	if [[ -z ${extraction} ]]; then
		echo "${ZSH_SCRIPT}:${LINENO}: error
		unable to extract version number from formula" >&2
		exit 1
	fi
	typeset -a old_version=(${(s<.>)extraction})
	typeset -a new_version=(${old_version})
	(( new_version[-1] += 1 ))

	echo "${ZSH_SCRIPT}:${LINENO} updating package ${package} information
	version: ${(j<.>)old_version} -> ${(j<.>)new_version}
	checksum: ${old_checksum} -> ${new_checksum}"

	# Update the value of the SHA 256 checksum for the current formula 
	print -- '-----'
	print -- sed -i -E "s/${old_checksum}/${new_checksum}/" ${formula}
	sed -i -E "s/${old_checksum}/${new_checksum}/" ${formula}
	print -- '-----'

	# Update the formula with the incremented version number
	print -- '-----'
	print -- sed -i -E "s/version \"${(j<.>)old_version}\"/version \"${(j<.>)new_version}\"/" ${formula}
	sed -i -E "s/version \"${(j<.>)old_version}\"/version \"${(j<.>)new_version}\"/" ${formula}
	print -- '-----'

	# Replace the old archive with the updated version
	mv -v -f ${tmpfile} ${archive}

	# Add the newly updated archive tarball and 
	# the corresponding amendments to its formula 
	# to the current commit being made
	git add ${archive} ${formula}

	# Remove any old cached installations of the package
	# which allows us to test the new installation locally
	# before pushing it out to GitHub
	rm -f -v ${HOME}/Library/Caches/Homebrew/downloads/*${archive:t}(N)
done
